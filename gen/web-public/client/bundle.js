(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var app, mod;

  app = angular.module('PublicApp', ['ngRoute', 'oc.modal', 'ui.bootstrap', 'ngMap', 'google.places', 'angularFileUpload', 'monospaced.elastic']);

  mod = require('web-app-modules/gen/client');

  app.controller('IndexController', require('./index-controller'));

  app.controller('CalendarController', require('./widgets/calendar/calendar'));

  app.factory('LoginInterceptor', mod.auth.loginInterceptor);

  app.config([
    '$httpProvider', '$routeProvider', function($httpProvider, $routeProvider) {
      var userPromise;
      $httpProvider.interceptors.push('LoginInterceptor');
      userPromise = {
        xxx: function($q, $http, $rootScope) {
          var i;
          if ($rootScope.user) {
            return;
          }
          i = $q.defer();
          $http.get('module/auth/getLogin').success(function(data) {
            $rootScope.user = data.user;
            return i.resolve();
          }).error(function() {
            delete $rootScope.user;
            return i.reject();
          });
          return i.promise;
        }
      };
      return $routeProvider.when('/', {
        controller: require('./home/home'),
        templateUrl: 'home/home.html',
        resolve: userPromise
      }).when('/contact', {
        controller: require('./contact/contact'),
        templateUrl: '/contact/contact.html',
        resolve: userPromise
      }).when('/features', {
        controller: require('./features/features'),
        templateUrl: '/features/features.html',
        resolve: userPromise
      }).when('/provider-profile', {
        controller: require('./provider-profile/provider-profile'),
        templateUrl: '/provider-profile/provider-profile.html'
      }).when('/editindividualprofile', {
        controller: require('./edit-individual-profile/edit-individual-profile'),
        templateUrl: '/edit-individual-profile/edit-individual-profile.html'
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

  module.exports = app;

}).call(this);

},{"./contact/contact":3,"./edit-individual-profile/edit-individual-profile":4,"./features/features":5,"./home/home":6,"./index-controller":7,"./provider-profile/provider-profile":9,"./widgets/calendar/calendar":10,"web-app-modules/gen/client":15}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = ['$scope', function($scope) {}];

}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      $scope.gotoPage('search');
      $scope.providerProfileController = require('./../provider-profile/provider-profile');
      $scope.businessProfileController = require('./../business-profile/business-profile');
      setTimeout(function() {
        return $('#location-search').focus();
      }, 100);
      google.maps.event.addDomListener(window, 'load', function() {
        return console.log("Maps loaded");
      });
      setTimeout(function() {
        var canvas, mapOptions;
        canvas = document.getElementById('mapCanvas');
        mapOptions = {
          center: {
            lat: 0,
            lng: 0
          },
          zoom: 8
        };
        $scope.geoCoder = new google.maps.Geocoder();
        $scope.map = new google.maps.Map(canvas, mapOptions);
        if (navigator.geolocation) {
          return navigator.geolocation.getCurrentPosition(function(position) {
            var userLocation;
            console.log(JSON.stringify(position));
            userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            return $scope.geoCoder.geocode({
              location: userLocation
            }, function(results, status) {
              var i, len, place, ref, results1;
              console.log(status);
              console.log(JSON.stringify(results[0]));
              results1 = [];
              for (i = 0, len = results.length; i < len; i++) {
                place = results[i];
                if ((_.contains(place.types, 'country')) && (((ref = place.geometry) != null ? ref.viewport : void 0) !== void 0)) {
                  $scope.map.fitBounds(place.geometry.viewport);
                  results1.push($scope.loadCirclesForPlace(place));
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            });
          });
        }
      }, 0);
      $scope.search = {
        places: void 0
      };
      $scope.$watch('search.places', function(place) {
        if (place === void 0 || place.geometry === void 0) {
          return;
        }
        if (place.geometry.viewport) {
          $scope.map.fitBounds(place.geometry.viewport);
          $scope.map.panToBounds(place.geometry.viewport);
        } else if (place.geometry.location) {
          $scope.map.panTo(place.geometry.location);
          $scope.map.setZoom(12);
        }
        if (place.geometry.location) {
          $scope.area = place.formatted_address;
          return $scope.loadCirclesForPlace(place);
        }
      });
      $scope.onMarkerClick = function() {
        return $scope.page = 'provider-profile';
      };
      $scope.circles = [];
      return $scope.loadCirclesForPlace = function(place) {
        var c, circle, i, len, ref;
        ref = $scope.circles;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          c.setMap(null);
        }
        circle = new google.maps.Circle({
          center: place.geometry.location,
          radius: 1000,
          map: $scope.map,
          strokeWeight: 0,
          fillColor: '#e18882',
          fillOpacity: 0.4,
          click: function(event) {}
        });
        $scope.circles.push(circle);
        return google.maps.event.addListener(circle, 'click', function(event) {
          return $scope.$apply(function() {
            return $scope.area = place.formatted_address;
          });
        });
      };
    }
  ];

}).call(this);

},{"./../business-profile/business-profile":2,"./../provider-profile/provider-profile":9}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      return console.log("Edit individual profile screen");
    }
  ];

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var FeaturesController;

  module.exports = FeaturesController = function($scope, $http) {
    return $http.post("/rest/getPrivateUserData").success(function(data, status, headers, config) {
      $scope.data = data.data;
      return $scope.error = data.error;
    }).error(function(data, status, headers, config) {
      return $scope.error = data;
    });
  };

  FeaturesController.$inject = ['$scope', '$http'];

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var HomeController;

  module.exports = HomeController = function($scope) {};

  HomeController.$inject = ['$scope'];

}).call(this);

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var ctr, mod;

  mod = require('web-app-modules/gen/client');

  ctr = module.exports = function($scope, $location, $ocModal, $http, $modal, $rootScope, $sce) {

    /*
    	## sourceURL=hello.js
     */
    $scope.back = function() {
      return window.history.back();
    };
    $scope.log = function(x) {
      if (_.isObject(x)) {
        return console.log(JSON.stringify(x, null, 2));
      } else {
        return console.log(x.valueOf());
      }
    };
    $scope.getLogin = function() {
      return $http.get("/module/auth/getLogin").success(function(data, status, headers, config) {
        $scope.user = data.user;
        return $scope.checked = true;
      });
    };
    $scope.goto = function(path) {
      $scope.path = path;
      console.log("Going to " + path);
      return $location.path(path);
    };
    $scope.gotoPage = function(p) {
      return $scope.page = p;
    };
    $scope.isPage = function(p) {
      return $scope.page === p;
    };
    $scope.login = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'module/auth/login.html',
        controller: mod.auth.login
      });
      return modalInstance.result.then(function(result) {
        return $rootScope.user = result;
      }, function() {
        return $location.path('/');
      });
    };
    $scope.signup = function() {
      var modal;
      return modal = $modal.open({
        templateUrl: 'module/auth/signup.html',
        controller: mod.auth.signup
      });
    };
    $scope.pay = function(description, amount) {
      return $modal.open({
        templateUrl: 'module/payment/load-balance.html',
        controller: mod.payment.loadBalance
      });
    };
    return $scope.logout = function() {
      return $http.post("/module/auth/logout").success(function(data, status, headers, config) {
        delete $rootScope.user;
        return $location.path('/');
      });
    };
  };

  ctr.$inject = ['$scope', '$location', '$ocModal', '$http', '$modal', '$rootScope', '$sce'];

}).call(this);

},{"web-app-modules/gen/client":15}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      $scope.weeks = [];
      $scope.weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      $scope.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      $scope.today = new XDate();
      $scope.selectDay = function(day) {
        var a, d;
        if ($scope.editing) {
          d = new XDate(day.date).getTime();
          a = $scope.person.availability;
          if (_.contains(a, d)) {
            _.remove(a, function(t) {
              return t === d;
            });
          } else {
            a.push(d);
          }
          return $scope.updateCalendar();
        }
      };
      $scope.prevMonth = function() {
        $scope.month--;
        if ($scope.month === -1) {
          $scope.month = 11;
          $scope.year--;
        }
        return $scope.updateCalendar();
      };
      $scope.nextMonth = function() {
        $scope.month++;
        if ($scope.month === 12) {
          $scope.month = 0;
          $scope.year++;
        }
        return $scope.updateCalendar();
      };
      $scope.updateCalendar = function() {
        var current, day, firstDayOfMonth, i, isPast, isSelected, isToday, results, week;
        firstDayOfMonth = new XDate($scope.year, $scope.month, 1);
        current = new XDate(firstDayOfMonth).addDays(-firstDayOfMonth.getDay());
        results = [];
        for (week = i = 0; i <= 5; week = ++i) {
          $scope.weeks[week] = {
            number: 1,
            days: []
          };
          results.push((function() {
            var j, results1;
            results1 = [];
            for (day = j = 0; j <= 6; day = ++j) {
              isToday = Math.floor(current.diffDays($scope.today)) === 0;
              isPast = current.diffDays($scope.today) >= 1;
              isSelected = _.contains($scope.person.availability, current.getTime());
              $scope.weeks[week].days.push({
                number: current.getDate(),
                date: current.toDate(),
                enabled: current.getMonth() === $scope.month || isPast,
                today: isToday,
                selected: isSelected,
                past: isPast
              });
              results1.push(current.addDays(1));
            }
            return results1;
          })());
        }
        return results;
      };
      $scope.month = $scope.today.getMonth();
      $scope.year = $scope.today.getFullYear();
      return $scope.updateCalendar();
    }
  ];

}).call(this);

},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'FileUploader', function($scope, FileUploader) {
      var uploader;
      $scope.calendarController = require('./calendar/calendar');
      $scope.person = {
        name: "Kasia",
        title: "Profesjonalna dupencja",
        description: "24 lata, fajna dupa ze mnie",
        contacts: [
          {
            type: 'Email',
            value: 'kasia@serveus.com'
          }, {
            type: 'Telefon',
            value: '000 000 0000'
          }
        ],
        services: [
          {
            name: 'Cleaning'
          }, {
            name: 'Ironing'
          }, {
            name: 'Babysitting'
          }, {
            name: 'Shovelling snow'
          }
        ],
        prices: [
          {
            name: 'Godzina u ciebie',
            value: '200 zl'
          }, {
            name: 'Godzina u mnie',
            value: '200 zl'
          }, {
            name: 'Lodziak',
            value: '+50 zl'
          }
        ],
        hours: [
          {
            name: 'Poniedzialek',
            value: '23:00 - 8:00'
          }, {
            name: 'Wtorek',
            value: '23:00 - 8:00'
          }, {
            name: 'Sroda',
            value: '23:00 - 8:00'
          }, {
            name: 'Czwartek',
            value: '23:00 - 8:00'
          }, {
            name: 'Piatek',
            value: '23:00 - 8:00'
          }, {
            name: 'Sobota',
            value: '23:00 - 8:00'
          }
        ],
        availability: [new XDate(2015, 4, 10).getTime(), new XDate(2015, 4, 11).getTime(), new XDate(2015, 4, 13).getTime(), new XDate(2015, 4, 14).getTime()],
        pictures: []
      };
      $scope.save = function() {
        return $scope.toggleEdit();
      };
      $scope.toggleEdit = function() {
        $scope.editing = !$scope.editing;
        if ($scope.editing && $scope.person.location) {
          return $scope.search.places = $scope.person.location.name;
        }
      };
      $scope.newContact = function() {
        return $scope.person.contacts.push({});
      };
      $scope.deleteContact = function(c, index) {
        return $scope.person.contacts.splice(index, 1);
      };
      $scope.newService = function() {
        return $scope.person.services.push({});
      };
      $scope.deleteService = function(s, index) {
        return $scope.person.services.splice(index, 1);
      };
      $scope.newPrice = function() {
        return $scope.person.prices.push({});
      };
      $scope.deletePrice = function(p, index) {
        return $scope.person.prices.splice(index, 1);
      };
      $scope.newHour = function() {
        return $scope.person.hours.push({});
      };
      $scope.deleteHour = function(p, index) {
        return $scope.person.hours.splice(index, 1);
      };
      setTimeout(function() {
        return $('#location-search').focus();
      }, 100);
      uploader = $scope.uploader = new FileUploader;
      uploader.scope = $scope;
      uploader.url = 'rest/uploadGraphic';
      uploader.onAfterAddingFile = function(event, item) {
        return $scope.uploader.uploadAll();
      };
      uploader.onSuccessItem = function(item, response, status, headers) {
        var photo;
        if (response.result === 'success') {
          photo = {
            url: "graphic/" + response.file
          };
          return $scope.person.pictures.push(photo);
        }
      };
      google.maps.event.addDomListener(window, 'load', function() {
        return console.log("Maps loaded");
      });
      $scope.geoCoder = new google.maps.Geocoder();
      setTimeout(function() {
        var canvas, mapOptions;
        canvas = document.getElementById('locationCanvas');
        mapOptions = {
          center: {
            lat: 0,
            lng: 0
          },
          zoom: 8
        };
        return $scope.map = new google.maps.Map(canvas, mapOptions);
      }, 0);
      $scope.getMapURL = function() {
        var width;
        if ($scope.person.location === void 0) {
          return void 0;
        }
        width = $("#location-bar").outerWidth();
        return "https://maps.googleapis.com/maps/api/staticmap?center=" + $scope.person.location.name + "&size=" + width + "x200";
      };
      $scope.search = {
        places: void 0
      };
      return $scope.$watch('search.places', function(place) {
        if (place === void 0 || place.geometry === void 0) {
          return;
        }
        return $scope.person.location = {
          name: place.formatted_address,
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };
      });
    }
  ];

}).call(this);

},{"./calendar/calendar":8}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', '$ocModal', '$timeout', function($scope, $ocModal, $timeout) {
      $scope.weeks = [];
      $scope.weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      $scope.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      $scope.firstYear = 2000;
      $scope.lastYear = 2020;
      $scope.today = new XDate();
      $scope.selectDay = function(day) {
        var d;
        $scope.selectedDate = d = new XDate(day.date);
        $scope.month = d.getMonth();
        $scope.year = d.getFullYear();
        $scope.updateCalendar();
        return $timeout(function() {
          return $ocModal.close(d.toDate());
        }, 100);
      };
      $scope.selectMonth = function(month) {
        $scope.mode = 'day';
        $scope.month = month;
        return $scope.updateCalendar();
      };
      $scope.selectYear = function(year) {
        $scope.year = year;
        return $scope.showMonths();
      };
      $scope.prevYears = function() {
        $scope.year -= 20;
        return $scope.showYears();
      };
      $scope.nextYears = function() {
        $scope.year += 20;
        return $scope.showYears();
      };
      $scope.showYears = function() {
        var col, columns, current, i, ref, results, row, rows;
        $scope.mode = 'year';
        rows = 5;
        columns = 4;
        $scope.firstYear = $scope.year - ($scope.year % 20);
        $scope.lastYear = $scope.firstYear + rows * columns - 1;
        $scope.years = [];
        current = $scope.firstYear;
        results = [];
        for (row = i = 0, ref = rows - 1; 0 <= ref ? i <= ref : i >= ref; row = 0 <= ref ? ++i : --i) {
          $scope.years.push([]);
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (col = j = 0, ref1 = columns - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; col = 0 <= ref1 ? ++j : --j) {
              $scope.years[row].push(current);
              results1.push(current++);
            }
            return results1;
          })());
        }
        return results;
      };
      $scope.showMonths = function() {
        var col, columns, current, i, ref, results, row, rows;
        $scope.mode = 'month';
        rows = 6;
        columns = 2;
        $scope.months = [];
        current = 0;
        results = [];
        for (row = i = 0, ref = rows - 1; 0 <= ref ? i <= ref : i >= ref; row = 0 <= ref ? ++i : --i) {
          $scope.months.push([]);
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (col = j = 0, ref1 = columns - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; col = 0 <= ref1 ? ++j : --j) {
              $scope.months[row].push(current);
              results1.push(current++);
            }
            return results1;
          })());
        }
        return results;
      };
      $scope.prevMonth = function() {
        $scope.month--;
        if ($scope.month === -1) {
          $scope.month = 11;
          $scope.year--;
        }
        return $scope.updateCalendar();
      };
      $scope.nextMonth = function() {
        $scope.month++;
        if ($scope.month === 12) {
          $scope.month = 0;
          $scope.year++;
        }
        return $scope.updateCalendar();
      };
      $scope.nextYear = function() {
        $scope.year++;
        return $scope.updateCalendar();
      };
      $scope.prevYear = function() {
        $scope.year--;
        return $scope.updateCalendar();
      };
      $scope.updateCalendar = function() {
        var current, day, firstDayOfMonth, i, isSelected, isToday, results, week;
        firstDayOfMonth = new XDate($scope.year, $scope.month, 1);
        current = new XDate(firstDayOfMonth).addDays(-firstDayOfMonth.getDay());
        results = [];
        for (week = i = 0; i <= 5; week = ++i) {
          $scope.weeks[week] = {
            number: 1,
            days: []
          };
          results.push((function() {
            var j, results1;
            results1 = [];
            for (day = j = 0; j <= 6; day = ++j) {
              isToday = Math.floor(current.diffDays($scope.today)) === 0;
              isSelected = $scope.selectedDate !== void 0 && Math.floor(current.diffDays($scope.selectedDate)) === 0;
              $scope.weeks[week].days.push({
                number: current.getDate(),
                date: current.toDate(),
                enabled: current.getMonth() === $scope.month,
                today: isToday,
                selected: isSelected
              });
              results1.push(current.addDays(1));
            }
            return results1;
          })());
        }
        return results;
      };
      $scope.mode = 'day';
      if ($scope.selectedDate === void 0) {
        $scope.month = $scope.today.getMonth();
        $scope.year = $scope.today.getFullYear();
      } else {
        $scope.selectedDate = new XDate($scope.selectedDate);
        $scope.month = $scope.selectedDate.getMonth();
        $scope.year = $scope.selectedDate.getFullYear();
      }
      return $scope.updateCalendar();
    }
  ];

}).call(this);

},{}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var ChangePasswordController;

  module.exports = ChangePasswordController = function($scope, $http, $location) {
    $scope.changePassword = function() {
      if (!$scope.newpass || $scope.newpass.length === 0) {
        $scope.error = "Password is required";
        return;
      }
      if ($scope.newpass !== $scope.newpass2) {
        $scope.error = "Passwords don't match";
        return;
      }
      return $http.post("changePassword", {
        password: $scope.newpass
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!$scope.error) {
          return $scope.changed = true;
        }
      });
    };
    return $scope.cancel = function() {
      return $location.path("/");
    };
  };

  ChangePasswordController.$inject = ['$scope', '$http', '$location'];

}).call(this);

},{}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  module.exports = function($q, $modal, $injector, $timeout, $location) {
    return {
      'response': function(response) {
        var def;
        if (response.data === 'NOT AUTHENTICATED') {
          def = $q.defer();
          $modal.open({
            templateUrl: 'module/auth/login.html',
            controller: require('./login')
          }).result.then(function(user) {
            var http;
            http = $injector.get('$http');
            return http(response.config).then(function(secondResponse) {
              return def.resolve(secondResponse);
            });
          }, function() {
            def.reject("NOT AUTHENTICATED");
            return $location.path('/');
          });
          return def.promise;
        } else {
          return response;
        }
      }
    };
  };

}).call(this);

},{"./login":13}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var LoginController;

  module.exports = LoginController = function($scope, $http, $modalInstance, $rootScope) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.login = function() {
      return $http.post('module/auth/login', {
        username: this.username,
        password: this.password
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          $rootScope.user = data.user;
          return $modalInstance.close(data.user);
        }
      });
    };
    $scope.passwordReset = function() {
      $scope.resetting = true;
      delete $scope.error;
      return setTimeout(function() {
        return $('.focusme').focus();
      }, 100);
    };
    $scope.resetContinue = function() {
      if (!$scope.email || $scope.email.length === 0) {
        $scope.error = "Email is required";
        return;
      }
      return $http.post("module/auth/requestPasswordReset", {
        email: $scope.email
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!data.error) {
          return $scope.sent = true;
        }
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      });
    };
    $scope.close = function() {
      return $ocModal.close();
    };
    return $scope.resetCancel = function() {
      $scope.resetting = false;
      delete $scope.error;
      return setTimeout(function() {
        return $('#username').focus();
      }, 100);
    };
  };

  LoginController.$inject = ['$scope', '$http', '$modalInstance', '$rootScope'];

}).call(this);

},{}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var SignupController;

  module.exports = SignupController = function($scope, $ocModal, $http) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.signup = function() {
      return $http.post("signup", {
        user: $scope.user
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          return $scope.sent = true;
        }
      });
    };
    return $scope.close = function() {
      return $ocModal.close();
    };
  };

  SignupController.$inject = ['$scope', '$ocModal', '$http'];

}).call(this);

},{}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  module.exports = {
    payment: {
      loadBalance: require('./payments/client/load-balance')
    },
    auth: {
      changePassword: require('./authentication/client/change-password'),
      login: require('./authentication/client/login'),
      loginInterceptor: require('./authentication/client/login-interceptor'),
      signup: require('./authentication/client/signup')
    }
  };

}).call(this);

},{"./authentication/client/change-password":11,"./authentication/client/login":13,"./authentication/client/login-interceptor":12,"./authentication/client/signup":14,"./payments/client/load-balance":16}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var LoadBalanceController;

  module.exports = LoadBalanceController = function($scope, $http, $modalInstance) {
    setTimeout(function() {
      return $('.amount').focus();
    }, 100);
    $scope.doPay = function() {
      var handler;
      if (!$scope.amount || $scope.amount.length === 0) {
        $scope.error = "Amount is required";
        return;
      }
      if (isNaN($scope.amount)) {
        $scope.error = "Amount must be a number";
        return;
      }
      delete $scope.error;
      handler = StripeCheckout.configure({
        key: 'pk_test_6pRNASCoBOKtIshFeQd4XMUh',
        image: '/img/documentation/checkout/marketplace.png',
        token: function(token) {
          return $http.post("module/payment/loadBalance", {
            token: token
          }).success(function(data, status, headers, config) {
            $scope.error = data.error;
            if (!$scope.error) {
              return $scope.confirmed = true;
            }
          }).error(function(data, status, headers, config) {
            return $scope.error = data;
          });
        }
      });
      return handler.open({
        name: 'Webapp',
        description: 'Webapp subscription',
        amount: $scope.amount
      });
    };
    $scope.cancel = function() {
      return $modalInstance.close();
    };
    return $scope.close = function() {
      return $modalInstance.close();
    };
  };

  LoadBalanceController.$inject = ['$scope', '$http', '$modalInstance'];

}).call(this);

},{}]},{},[1]);
