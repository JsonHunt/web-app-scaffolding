(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  var app, mod;

  app = angular.module('PublicApp', ['ngRoute', 'oc.modal', 'ui.bootstrap']);

  mod = require('web-app-modules/gen/client');

  app.controller('IndexController', require('./index-controller'));

  app.factory('LoginInterceptor', mod.auth.loginInterceptor);

  app.config([
    '$httpProvider', '$routeProvider', function($httpProvider, $routeProvider) {
      var userPromise;
      $httpProvider.interceptors.push('LoginInterceptor');
      userPromise = {
        xxx: function($q, $http, $rootScope) {
          var i;
          if ($rootScope.user) {
            return;
          }
          i = $q.defer();
          $http.get('module/auth/getLogin').success(function(data) {
            $rootScope.user = data.user;
            return i.resolve();
          }).error(function() {
            delete $rootScope.user;
            return i.reject();
          });
          return i.promise;
        }
      };
      return $routeProvider.when('/', {
        controller: require('./home/home'),
        templateUrl: 'home/home.html',
        resolve: userPromise
      }).when('/contact', {
        controller: require('./messaging/messaging'),
        templateUrl: '/messaging/messaging.html',
        resolve: userPromise
      }).when('/features', {
        controller: require('./messaging/messaging'),
        templateUrl: '/messaging/messaging.html',
        resolve: userPromise
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

  module.exports = app;

}).call(this);

},{"./home/home":2,"./index-controller":3,"./messaging/messaging":4,"web-app-modules/gen/client":9}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var HomeController;

  module.exports = HomeController = function($scope) {};

  HomeController.$inject = ['$scope'];

}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var ctr, mod;

  mod = require('web-app-modules/gen/client');

  ctr = module.exports = function($scope, $location, $ocModal, $http, $modal, $rootScope) {

    /*
    	## sourceURL=hello.js
     */
    $scope.getLogin = function() {
      return $http.get("/module/auth/getLogin").success(function(data, status, headers, config) {
        $scope.user = data.user;
        return $scope.checked = true;
      });
    };
    $scope.goto = function(path) {
      $scope.path = path;
      return $location.path(path);
    };
    $scope.login = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'module/auth/login.html',
        controller: mod.auth.login
      });
      return modalInstance.result.then(function(result) {
        return $rootScope.user = result;
      }, function() {
        return $location.path('/');
      });
    };
    $scope.signup = function() {
      var modal;
      return modal = $modal.open({
        templateUrl: 'module/auth/signup.html',
        controller: mod.auth.signup
      });
    };
    $scope.pay = function(description, amount) {
      return $modal.open({
        templateUrl: 'module/payment/load-balance.html',
        controller: mod.payment.loadBalance
      });
    };
    return $scope.logout = function() {
      return $http.post("/module/auth/logout").success(function(data, status, headers, config) {
        delete $rootScope.user;
        return $location.path('/');
      });
    };
  };

  ctr.$inject = ['$scope', '$location', '$ocModal', '$http', '$modal'];

}).call(this);

},{"web-app-modules/gen/client":9}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  var MessageReaderController;

  module.exports = MessageReaderController = function($scope, $http, $interval) {
    $scope.filterMembersByLocation = function() {
      var allowedLocations, _base;
      if ($scope.settings.locationFilter) {
        if ((_base = $scope.settings).location == null) {
          _base.location = '';
        }
        allowedLocations = $scope.settings.locations.toLowerCase().split(' ');
        return $scope.members = _.filter($scope.allMembers, function(m) {
          var common, words, _ref;
          words = (_ref = m.location) != null ? _ref.toLowerCase().split(/[\s,;]/) : void 0;
          common = _.intersection(allowedLocations, words);
          return common.length > 0;
        });
      } else {
        return $scope.members = $scope.allMembers;
      }
    };
    $scope.getProfilesToRespond = function() {
      return $http.get("http://localhost:3000/messaging/getProfilesToRespond").success(function(data, status, headers, config) {
        if (data.status === 'ok') {
          $scope.allMembers = _.sortBy(data.profiles, function(member) {
            return member.id;
          });
          return $scope.filterMembersByLocation();
        } else if (data.status === 'error') {
          $scope.message = data.message;
          return $interval.cancel(window.checkInboxTimer);
        }
      });
    };
    $scope.respond = function(member) {
      return $http.post("http://localhost:3000/messaging/sendMessage/" + member.website + "/" + member.id, {
        message: $scope.response[member.id]
      }).success(function(data, status, headers, config) {
        return $scope.members = _.filter($scope.members, function(m) {
          return m.id !== member.id;
        });
      });
    };
    $scope.block = function(member) {
      return $http.get("http://localhost:3000/messaging/blockProfile/" + member.website + "/" + member.id).success(function(data, status, headers, config) {
        return $scope.members = _.filter($scope.members, function(m) {
          return m.id !== member.id;
        });
      });
    };
    $scope.saveSettings = function() {
      return $http.post("http://localhost:3000/messaging/setSettings", {
        locations: $scope.settings.locations,
        locationFilter: $scope.settings.locationFilter
      });
    };
    if (window.user === void 0) {
      return $location.path('');
    } else {
      if (window.response == null) {
        window.response = {};
      }
      $scope.response = window.response;
      $scope.settings = window.user.settings;
      $scope.getProfilesToRespond();
      window.checkInboxTimer = $interval((function(_this) {
        return function() {
          return $scope.getProfilesToRespond();
        };
      })(this), 30000);
      return $scope.$on("$destroy", function() {
        return $interval.cancel(window.checkInboxTimer);
      });
    }
  };

  MessageReaderController.$inject = ['$scope', '$http', '$interval'];

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  var ChangePasswordController;

  module.exports = ChangePasswordController = function($scope, $http, $location) {
    $scope.changePassword = function() {
      if (!$scope.newpass || $scope.newpass.length === 0) {
        $scope.error = "Password is required";
        return;
      }
      if ($scope.newpass !== $scope.newpass2) {
        $scope.error = "Passwords don't match";
        return;
      }
      return $http.post("changePassword", {
        password: $scope.newpass
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!$scope.error) {
          return $scope.changed = true;
        }
      });
    };
    return $scope.cancel = function() {
      return $location.path("/");
    };
  };

  ChangePasswordController.$inject = ['$scope', '$http', '$location'];

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  module.exports = function($q, $modal, $injector, $timeout, $location) {
    return {
      'response': function(response) {
        var def;
        if (response.data === 'NOT AUTHENTICATED') {
          def = $q.defer();
          $modal.open({
            templateUrl: 'module/auth/login.html',
            controller: require('./login')
          }).result.then(function(user) {
            var http;
            http = $injector.get('$http');
            return http(response.config).then(function(secondResponse) {
              return def.resolve(secondResponse);
            });
          }, function() {
            def.reject("NOT AUTHENTICATED");
            return $location.path('/');
          });
          return def.promise;
        } else {
          return response;
        }
      }
    };
  };

}).call(this);

},{"./login":7}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  var LoginController;

  module.exports = LoginController = function($scope, $http, $modalInstance, $rootScope) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.login = function() {
      return $http.post('module/auth/login', {
        username: this.username,
        password: this.password
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          $rootScope.user = data.user;
          return $modalInstance.close(data.user);
        }
      });
    };
    $scope.passwordReset = function() {
      $scope.resetting = true;
      delete $scope.error;
      return setTimeout(function() {
        return $('.focusme').focus();
      }, 100);
    };
    $scope.resetContinue = function() {
      if (!$scope.email || $scope.email.length === 0) {
        $scope.error = "Email is required";
        return;
      }
      return $http.post("module/auth/requestPasswordReset", {
        email: $scope.email
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!data.error) {
          return $scope.sent = true;
        }
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      });
    };
    $scope.close = function() {
      return $ocModal.close();
    };
    return $scope.resetCancel = function() {
      $scope.resetting = false;
      delete $scope.error;
      return setTimeout(function() {
        return $('#username').focus();
      }, 100);
    };
  };

  LoginController.$inject = ['$scope', '$http', '$modalInstance', '$rootScope'];

}).call(this);

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  var SignupController;

  module.exports = SignupController = function($scope, $modalInstance, $http) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.signup = function() {
      return $http.post("module/auth/signup", {
        user: $scope.user
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          return $scope.sent = true;
        }
      });
    };
    return $scope.close = function() {
      return $modalInstance.close();
    };
  };

  SignupController.$inject = ['$scope', '$modalInstance', '$http'];

}).call(this);

},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  module.exports = {
    payment: {
      loadBalance: require('./payments/client/load-balance')
    },
    auth: {
      changePassword: require('./authentication/client/change-password'),
      login: require('./authentication/client/login'),
      loginInterceptor: require('./authentication/client/login-interceptor'),
      signup: require('./authentication/client/signup')
    }
  };

}).call(this);

},{"./authentication/client/change-password":5,"./authentication/client/login":7,"./authentication/client/login-interceptor":6,"./authentication/client/signup":8,"./payments/client/load-balance":10}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  var LoadBalanceController;

  module.exports = LoadBalanceController = function($scope, $http, $modalInstance) {
    setTimeout(function() {
      return $('.amount').focus();
    }, 100);
    $scope.doPay = function() {
      var handler;
      if (!$scope.amount || $scope.amount.length === 0) {
        $scope.error = "Amount is required";
        return;
      }
      if (isNaN($scope.amount)) {
        $scope.error = "Amount must be a number";
        return;
      }
      delete $scope.error;
      handler = StripeCheckout.configure({
        key: 'pk_test_6pRNASCoBOKtIshFeQd4XMUh',
        image: '/img/documentation/checkout/marketplace.png',
        token: function(token) {
          return $http.post("module/payment/loadBalance", {
            token: token
          }).success(function(data, status, headers, config) {
            $scope.error = data.error;
            if (!$scope.error) {
              return $scope.confirmed = true;
            }
          }).error(function(data, status, headers, config) {
            return $scope.error = data;
          });
        }
      });
      return handler.open({
        name: 'Webapp',
        description: 'Webapp subscription',
        amount: $scope.amount
      });
    };
    $scope.cancel = function() {
      return $modalInstance.close();
    };
    return $scope.close = function() {
      return $modalInstance.close();
    };
  };

  LoadBalanceController.$inject = ['$scope', '$http', '$modalInstance'];

}).call(this);

},{}]},{},[1]);
