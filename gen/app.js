// Generated by CoffeeScript 1.9.2
(function() {
  var SessionStore, app, authorizeAdmin, authorizeUser, bodyParser, cookieParser, express, favicon, logger, mod, path, session, sessionStore;

  express = require('express');

  path = require('path');

  favicon = require('serve-favicon');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  session = require('express-session');

  SessionStore = require('express-mysql-session');

  mod = require('web-app-modules/gen/server');

  app = express();

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(logger('dev'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  sessionStore = new SessionStore({
    host: 'localhost',
    port: 3306,
    user: 'root',
    password: 'garsonka',
    database: 'webapp'
  });

  app.use(session({
    key: 'session_cookie_name',
    secret: 'session_cookie_secret',
    store: sessionStore,
    resave: true,
    saveUninitialized: true
  }));

  authorizeAdmin = function(req, res, next) {
    if (req.session.administrator) {
      return next();
    } else {
      return res.send("NOT AUTHENTICATED");
    }
  };

  authorizeUser = function(req, res, next) {
    if (req.session.appuser) {
      return next();
    } else {
      return res.send("NOT AUTHENTICATED");
    }
  };

  app.use(express["static"](path.join(__dirname, 'web-public/client')));

  app.use('/graphic', express["static"](path.join(__dirname, './../graphicFiles')));

  app.use('/rest', require('./web-public/server/router'));

  app.use('/module/auth', mod.auth);

  app.use('/module/payment', mod.payment);

  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    next(err);
  });

  if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      res.render('error', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: {}
    });
  });

  module.exports = app;

}).call(this);
